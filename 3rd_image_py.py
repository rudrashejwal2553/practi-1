# -*- coding: utf-8 -*-
"""3rd image .py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f7VoPdGMuDNIFinN6Cj1b12yhEBZ8gJW
"""

import numpy as np

import matplotlib.pyplot as plt

from tensorflow import keras

from keras.datasets import cifar10

from keras.models import Sequential

from  keras .layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout

(x_train ,y_train),(x_test,y_test)=cifar10.load_data()

x_train.shape

x_test.shape

label=['airplane','automobile','bird','cat','deer','dog','frog','horse','shift','truck']

label

plt.figure(figsize=(12,12))
for i in range (25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.title(label[y_train[i][0]])
  plt.imshow(x_train[i])

from keras.utils import to_categorical

y_train_new=to_categorical(y_train)
y_test_new=to_categorical(y_test)

y_train_new.shape

#can2D -> convolutional layers
#building block of Cnn
model.add(Conv2D(filters=32,input_shape=(32,32,3),kernel_size=(3.3),activation='relu'))

#downsize it by using maxpool-> textmax value in a local region
model.add[MaxPool2D(pool_size=2.2)]
#regularization
#randomly sets a fraction of our input  units to 0 during training
#which helps priventing overfitting
module.add(Dropout(0.2))
#add more Conv layers
model.add(Conv2D(filters=64,kernel_size=(3,3),activation='relu'))
model.add(MaxPool2D(pool_size=2.2))
#prepare the data for the fully connected layers
model.add(flatten())

#Add fully connected layers
#final dense layer has 10 units with softmax
model.add(Dense(512,activation='relu'))
model.add(Dense(10,activation='softmax'))

